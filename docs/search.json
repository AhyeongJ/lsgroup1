[
  {
    "objectID": "practice presentation.html",
    "href": "practice presentation.html",
    "title": "practice presentation",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "practice presentation.html#quarto",
    "href": "practice presentation.html#quarto",
    "title": "practice presentation",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "practice presentation.html#running-code",
    "href": "practice presentation.html#running-code",
    "title": "practice presentation",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "presentation 0.html",
    "href": "presentation 0.html",
    "title": "presentation 0",
    "section": "",
    "text": "필요한 패키지 불러오기\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n데이터 불러오기\n\nmarket = pd.read_excel(\"data/traditionalmarket.xlsx\")\nmarket2 = market.copy()\n\n\n\n변수명 재설정하기\n\nmarket2 = market2.rename(columns = {\"시장명\" : \"market_name\", \n                                    \"시장유형\" : \"type\",\n                                    \"소재지도로명주소\" : \"open_period\",\n                                    \"소재지지번주소\" : \"address_old\",\n                                    \"점포수\" : \"market_count\",\n                                    \"사용가능상품권\" : \"certificate\",\n                                    \"공중화장실 보유여부\" :\"public_toilet\",\n                                    \"주차장 보유여부\" : \"parking_lot\",\n                                    \"개설년도\" : \"year\",\n                                    \"데이터기준일자\" : \"data_date\"})\n\n\n\n데이터 변수별 요약통계량과 정보 확인하기\n\nmarket2['market_count'].describe()\nmarket2[\"public_toilet\"].info()\nmarket2[\"parking_lot\"].info()\n\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: public_toilet\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n&lt;class 'pandas.core.series.Series'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nSeries name: parking_lot\nNon-Null Count  Dtype \n--------------  ----- \n1439 non-null   object\ndtypes: object(1)\nmemory usage: 11.4+ KB\n\n\n\n\nmarket_scale 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"market_count\"] &gt;= 50, \"medium\", \"small\")))\nsns.countplot(data = market2, x = 'market_scale', hue = 'market_scale')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nconv_level 파생변수 생성과 막대그래프 확인\n\nplt.clf()\nmarket2['conv_level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nsns.countplot(data = market2, x = 'conv_level', hue = 'conv_level')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n시장유형 및 점포규모의 시장개수 알아보기\n\ndf = market2.groupby([\"type\", \"market_scale\"], as_index = False) \\\n            .agg(market_count = (\"market_scale\", \"count\"))\ndf.sort_values('market_count', ascending = False)\n\n\n\n\n\n\n\n\ntype\nmarket_scale\nmarket_count\n\n\n\n\n1\n상설\nmedium\n532\n\n\n0\n상설\nlarge\n281\n\n\n2\n상설\nsmall\n189\n\n\n4\n상설+정기\nmedium\n145\n\n\n8\n정기\nsmall\n117\n\n\n3\n상설+정기\nlarge\n66\n\n\n5\n상설+정기\nsmall\n48\n\n\n7\n정기\nmedium\n46\n\n\n6\n정기\nlarge\n15\n\n\n\n\n\n\n\n\n\n막대그래프로 알아보기\n\nplt.clf()\nsns.barplot(data = df, x = 'type', y = 'market_count', hue = 'market_scale')\nplt.show()\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 49345 (\\N{HANGUL SYLLABLE SANG}) missing from font(s) DejaVu Sans.\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 49444 (\\N{HANGUL SYLLABLE SEOL}) missing from font(s) DejaVu Sans.\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 51221 (\\N{HANGUL SYLLABLE JEONG}) missing from font(s) DejaVu Sans.\n\nC:\\Users\\USER\\DS\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans."
  },
  {
    "objectID": "team_play_combination.html",
    "href": "team_play_combination.html",
    "title": "라이브러리 불러오기",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n\n데이터 불러오기\n\nmarket_raw = pd.read_excel(\"data/traditionalmarket.xlsx\")\nmarket = market_raw.copy()\npop_raw = pd.read_excel('data/pop_2015.xlsx', thousands = ',') #쉼표 없애주고 숫자로 바꿔줌.\npop = pop_raw.copy()\n\n\n\n데이터 전처리 1\n\npop = pop.iloc[1:18,[0,1,3,4,5,6,7,8,9,10,11,12,13]]\npop = pop.reset_index().iloc[:,1:]\n\n\n\n변수명 변경\n\nmarket = market.rename(columns={'시장명' : 'market_name',\n                              '시장유형' : 'type',\n                              '소재지도로명주소' : 'address_road',\n                              '시장개설주기' : 'open_period',\n                              '소재지지번주소' : 'address_old',\n                              '점포수' : 'store_count',\n                              '사용가능상품권' : 'certificate',\n                              '공중화장실 보유여부' : 'public_toilet',\n                              '주차장 보유여부' : 'parking_lot',\n                              '개설년도' : 'year' ,\n                              '데이터기준일자' : 'data_date'})\n\npop = pop.rename(columns={'행정기관' : 'region',\n                          '총 인구수' : 'total_pop',\n                          '0~9세' : '0~9',\n                          '10~19세' : '10~19',\n                          '20~29세' : '20~29',\n                          '30~39세' : '30~39',\n                          '40~49세' : '40~49',\n                          '50~59세' : '50~59',\n                          '60~69세' : '60~69',\n                          '70~79세' : '70~79',\n                          '80~89세' : '80~89',\n                          '90~99세' : '90~99',\n                          '100세 이상' : '100_over',\n                          })\n\n#이쯤에서 데이터 프레임 보여주면 좋을듯_정은서\n\n\n데이터 전처리 2\n\nregion = pop['region'] #행정기관 빼내기\npop = pop.iloc[:,1:].astype(int) #행정기관 빼고 나머지 열을 정수로 바꿈.\npop = pd.concat([region, pop], axis = 1) #빼낸 행정기관을 다시 합침\npop.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 17 entries, 0 to 16\nData columns (total 13 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   region     17 non-null     object\n 1   total_pop  17 non-null     int64 \n 2   0~9        17 non-null     int64 \n 3   10~19      17 non-null     int64 \n 4   20~29      17 non-null     int64 \n 5   30~39      17 non-null     int64 \n 6   40~49      17 non-null     int64 \n 7   50~59      17 non-null     int64 \n 8   60~69      17 non-null     int64 \n 9   70~79      17 non-null     int64 \n 10  80~89      17 non-null     int64 \n 11  90~99      17 non-null     int64 \n 12  100_over   17 non-null     int64 \ndtypes: int64(12), object(1)\nmemory usage: 1.9+ KB\n\n\n\n\n행정명 똑같이 수정 후 띄어쓰기 지우기.\n\npop['region'] = pop['region'].str.replace('세종특별자치시','세종특별시') \npop['region'] = pop['region'].str.replace('제주특별자치도','제주도')\npop['region'] = pop['region'].str.replace('  ','')\n\n\n\nmarket 데이터에서 지역 명 열(변수) 추가하기\n\nmarket['region'] = market[\"address_road\"].str.split(' ').str[0]\n\n\n\n인구 연령 범주 인구수 열(변수) 추가하기\n\npop['under20'] = pop['0~9'] + pop['10~19']\npop['2050'] = pop['20~29'] + pop['30~39'] + pop['40~49'] + pop['50~59']\npop['over60'] = pop['60~69'] + pop['70~79'] + pop['80~89'] + pop['90~99'] + pop['100_over']\n\n\n\n지역별 데이터 프레임 만들기\n\nmarket_region = market.groupby('region', as_index = False)\\\n      .agg(market_count = ('market_name', 'count'),\n           store_sum = ('store_count', 'sum'))\n\npop_region = pop[['region', 'total_pop', 'under20', '2050', 'over60']]\n\nmarket_pop = pd.merge(market_region, pop_region, how='left', on='region')\nmarket_pop.head()\n\n\n\n\n\n\n\n\nregion\nmarket_count\nstore_sum\ntotal_pop\nunder20\n2050\nover60\n\n\n\n\n0\n강원도\n58\n6811\n1549507\n294348\n894249\n360910\n\n\n1\n경기도\n130\n18977\n12522606\n2730973\n7878980\n1912653\n\n\n2\n경상남도\n155\n18156\n3364702\n702154\n2004453\n658095\n\n\n3\n경상북도\n149\n16582\n2702826\n500721\n1544234\n657871\n\n\n4\n광주광역시\n26\n3411\n1472199\n340705\n895137\n236357\n\n\n\n\n\n\n\n\n\n있는 값들로 계산할 수 있는 열(변수) 추가\n\nmarket_pop['pct_under20'] = round(market_pop['under20'] / market_pop['total_pop'] * 100, 2) #미성년자 비율 추가 + 소숫점 정리리\nmarket_pop['pct_2050'] = round(market_pop['2050'] / market_pop['total_pop'] * 100, 2)\nmarket_pop['pct_over60'] = round(market_pop['over60'] / market_pop['total_pop'] * 100, 2)\n\n\n\n60대 이상 박스플롯\n\npx.box(data_frame = market_pop, y = 'pct_over60')\n\n                                                \n\n\n\nmarket_pop['pct_over60_mean'] = np.where(market_pop['pct_over60'] &gt;= market_pop['pct_over60'].mean(),\n                              'UP', 'DOWN') # 60대 이상 비율의 평균을 구한 뒤 그것보다 높거나 낮다는것 표시.\n\nmarket_pop['pop_per_market'] = round(market_pop['total_pop'] / market_pop['market_count'], 1) #인구 수 / 시장 수, 소숫점 정리.\nmarket_pop['pop_per_store'] = round(market_pop['total_pop'] / market_pop['store_sum'], 1)\nmarket_pop['old_per_market'] = round(market_pop['over60'] / market_pop['market_count'], 1)\nmarket_pop['old_per_store'] = round(market_pop['over60'] / market_pop['store_sum'], 1)\n\n\n\n기타 등등 코드\n\n\n엑셀로 빼보기\n\n# market_pop.to_excel(excel_writer = 'market_pop.xlsx', index=False)\n\n\n\n데이터 프레임 출력 제한 설정\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nmarket_pop\n\n\n\n\n\n\n\n\nregion\nmarket_count\nstore_sum\ntotal_pop\nunder20\n2050\nover60\npct_under20\npct_2050\npct_over60\npct_over60_mean\npop_per_market\npop_per_store\nold_per_market\nold_per_store\n\n\n\n\n0\n강원도\n58\n6811\n1549507\n294348\n894249\n360910\n19.00\n57.71\n23.29\nUP\n26715.6\n227.5\n6222.6\n53.0\n\n\n1\n경기도\n130\n18977\n12522606\n2730973\n7878980\n1912653\n21.81\n62.92\n15.27\nDOWN\n96327.7\n659.9\n14712.7\n100.8\n\n\n2\n경상남도\n155\n18156\n3364702\n702154\n2004453\n658095\n20.87\n59.57\n19.56\nUP\n21707.8\n185.3\n4245.8\n36.2\n\n\n3\n경상북도\n149\n16582\n2702826\n500721\n1544234\n657871\n18.53\n57.13\n24.34\nUP\n18139.8\n163.0\n4415.2\n39.7\n\n\n4\n광주광역시\n26\n3411\n1472199\n340705\n895137\n236357\n23.14\n60.80\n16.05\nDOWN\n56623.0\n431.6\n9090.7\n69.3\n\n\n5\n대구광역시\n109\n14290\n2487829\n497705\n1527715\n462409\n20.01\n61.41\n18.59\nDOWN\n22824.1\n174.1\n4242.3\n32.4\n\n\n6\n대전광역시\n27\n3413\n1518775\n330013\n945141\n243621\n21.73\n62.23\n16.04\nDOWN\n56250.9\n445.0\n9023.0\n71.4\n\n\n7\n부산광역시\n169\n29094\n3513777\n612730\n2138393\n762654\n17.44\n60.86\n21.70\nUP\n20791.6\n120.8\n4512.7\n26.2\n\n\n8\n서울특별시\n216\n50146\n10022181\n1769089\n6405416\n1847676\n17.65\n63.91\n18.44\nDOWN\n46399.0\n199.9\n8554.1\n36.8\n\n\n9\n세종특별시\n4\n545\n210884\n53223\n126310\n31351\n25.24\n59.90\n14.87\nDOWN\n52721.0\n386.9\n7837.8\n57.5\n\n\n10\n울산광역시\n40\n3722\n1173534\n256199\n752826\n164509\n21.83\n64.15\n14.02\nDOWN\n29338.4\n315.3\n4112.7\n44.2\n\n\n11\n인천광역시\n46\n10555\n2925815\n596288\n1868235\n461292\n20.38\n63.85\n15.77\nDOWN\n63604.7\n277.2\n10028.1\n43.7\n\n\n12\n전라남도\n108\n7248\n1908996\n368099\n1032005\n508892\n19.28\n54.06\n26.66\nUP\n17675.9\n263.4\n4712.0\n70.2\n\n\n13\n전라북도\n60\n5139\n1869711\n377637\n1046333\n445741\n20.20\n55.96\n23.84\nUP\n31161.8\n363.8\n7429.0\n86.7\n\n\n14\n제주도\n25\n4181\n624395\n140496\n366147\n117752\n22.50\n58.64\n18.86\nDOWN\n24975.8\n149.3\n4710.1\n28.2\n\n\n15\n충청남도\n58\n7657\n2077649\n426450\n1193107\n458092\n20.53\n57.43\n22.05\nUP\n35821.5\n271.3\n7898.1\n59.8\n\n\n16\n충청북도\n59\n7156\n1583952\n321947\n935117\n326888\n20.33\n59.04\n20.64\nUP\n26846.6\n221.3\n5540.5\n45.7\n\n\n\n\n\n\n\n\n\n출력 제한 다시 되돌리기\n\npd.reset_option('display.max_rows')\npd.reset_option('display.max_columns')\n\n지역별 시장 수 막대그래프\n\npx.bar(data_frame = market_pop, x = 'region', y = 'market_count') \n\n                                                \n\n\n지역 별 점포 수 막대 그래프\n\npx.bar(data_frame = market_pop, x = 'region', y = 'store_sum') \n\n                                                \n\n\n지역별 총 인구 수 막대 그래프\n\npx.bar(data_frame = market_pop, x = 'region', y = 'total_pop') \n\n                                                \n\n\n지역별 20세 미만 인구 막대 그래프\n\npx.bar(data_frame = market_pop, x = 'region', y = 'under20') \n\n                                                \n\n\n지역별 20세 이상 60세 미만 인구 막대 그래프\n\npx.bar(data_frame = market_pop, x = 'region', y = '2050') \n\n                                                \n\n\n지역별 60세 이상 막대 그래프\n\npx.bar(data_frame = market_pop, x = 'region', y = 'over60') \n\n                                                \n\n\n지역별 인구 비율 누적 그래프\n\ndf = market_pop[['region', 'pct_under20', 'pct_2050', 'pct_over60']] \\\n               .sort_values('pct_over60', ascending = False)\n\n\n# 노년층 비율이 높은 순으로 정렬\ndf = df.sort_values('pct_over60', ascending=False)\n\n# 데이터프레임을 길게 변환\ndf_melted = df.melt(id_vars='region', var_name='ageg', value_name='pct')\n\n# 색상 지정\ncolors = {\n    'pct_under20': 'skyblue',\n    'pct_2050': 'lightyellow',\n    'pct_over60': 'salmon'\n}\n\n# Plotly Express를 사용하여 누적 가로 막대 그래프 생성\nfig = px.bar(df_melted, x='pct', y='region', color='ageg', \n             orientation='h', color_discrete_map=colors,\n             category_orders={'ageg': ['pct_under20', 'pct_2050', 'pct_over60']})\n\n# 그래프 설정\nfig.update_layout(\n    barmode='stack',\n    title='연령대별 인구 비율 비교',\n    xaxis_title='pct',\n    yaxis_title='region'\n)\n\nfig.show()\n\n                                                \n\n\n지역별 총 인구 / 시장 수\n\npx.bar(data_frame = market_pop, x = 'region', y = 'pop_per_market') \n\n                                                \n\n\n지역별 총 인구 / 점포 수\n\npx.bar(data_frame = market_pop, x = 'region', y = 'pop_per_store') \n\n                                                \n\n\n지역별 총 60대 인구 / 마켓 수\n\npx.bar(data_frame = market_pop, x = 'region', y = 'old_per_market') \n\n                                                \n\n\n지역별 총 60대 인구 / 점포 수\n\npx.bar(data_frame = market_pop, x = 'region', y = 'old_per_store')"
  }
]